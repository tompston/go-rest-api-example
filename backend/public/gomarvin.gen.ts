/**
 * @file API client generated by gomarvin, DO NOT EDIT!
 *
 * Rename the current file if you want to 
 * edit it and save changes.
 *
 * Repo             : https://github.com/tompston/gomarvin
 * Docs             : https://gomarvin.pages.dev/docs
 * Editor           : https://gomarvin.pages.dev
 * project_name     : "backend",
 * config_version   : "0.1"
 * gomarvin_version : "v0.6.x"
 * 
 */

/** The API client used by the fetch function */
export interface Client {
  host_url: string
  api_prefix: string
  headers: HeadersInit
}

/** Default api params */
export const defaultClient : Client = {
  host_url: "http://localhost:4444",
  api_prefix: "/api/v1",
  headers: {
    "Content-type": "application/json;charset=UTF-8",
  },
}


/**
 * optional interface used in the fetch request with optional parameters
 * @param {RequestInit} [options]
 * If default fetch options need to be edited, provide a custom options object
 * @param {string} [append_url]
 * extend the url with custom params (like "?name=jim")
 * @example
 * // Append an optional url string
 * async function FetchUserById() {
 *  const res = await F.GetUserById(client, 10, { append_url: "?name=jim" });
 *  console.log(res);
 * }
 * // Use a different RequestInit object in the fetch request
 * async function FetchUserById() {
 *  const res = await F.GetUserById(client, 10, { options: { method: "POST" } });
 *  console.log(res);
 * }
 */
export interface OptionalParams {
  options?: RequestInit;
  append_url?: string;
}


/** Endpoints for the User module */
export const UserEndpoints = {
  GetUsers,
  GetUserByID,
  RegisterUser,
  DeleteUser,
  GetUserByUsername,
  LoginUser,
  GetUserDetailsWithAuth,
}
    
/** Endpoints for the Transaction module */
export const TransactionEndpoints = {
  GetTransactionsForUser,
  CreateTransaction,
  GetTransactionByID,
}
    
/** Endpoints for the Balance module */
export const BalanceEndpoints = {
  GetBalance,
  CreateBalance,
  DeleteBalance,
  UpdateBalance,
}
    
/** Endpoints for the Auth module */
export const AuthEndpoints = {
  TokenIsValid,
}
    
/**
 * ### Body for the RegisterUser endpoint
 * @interface RegisterUserBody
 *
 * @field username `required,min=5,max=250`
 * @field password `required,min=10,max=250`
 * @field email `required,email`
 */
export interface RegisterUserBody  {
  username: string 
  password: string 
  email: string 
}

/**
 * ### Body for the LoginUser endpoint
 * @interface LoginUserBody
 *
 * @field username `required,min=5,max=250`
 * @field password `required,min=10,max=250`
 */
export interface LoginUserBody  {
  username: string 
  password: string 
}

/**
 * ### Body for the CreateTransaction endpoint
 * @interface CreateTransactionBody
 *
 * @field sender_id `required,uuid4`
 * @field reciever_id `required,uuid4`
 * @field amount `required`
 */
export interface CreateTransactionBody  {
  sender_id: string 
  reciever_id: string 
  amount: number 
}

/**
 * ### Body for the TokenIsValid endpoint
 * @interface TokenIsValidBody
 *
 * @field access_token `required`
 */
export interface TokenIsValidBody  {
  access_token: string 
}


/**
 * ### GET URL/user
 * Fetch GetUsers endpoint and return the promise of the response
 * @param {Client} client init settings for the api client (url and headers)
 * @param {OptionalParams} [opt] optional params you can add to the request ( appended_url and custom options )
 * @returns {Promise<Response>} Promise of the fetch request
 */
export async function GetUsers(client : Client, opt?: OptionalParams): Promise<Response> {
  const appended_url = opt?.append_url ? opt?.append_url : "";
  const url = `${client.host_url}${client.api_prefix}/user${appended_url}`;
  if (opt?.options) {
    return await fetch(url, opt?.options);
  }
  return await fetch(url, {
    method: "GET",
    headers: client.headers,
    });
}

/**
 * ### GET URL/user/id/[id:string]
 * Fetch GetUserByID endpoint and return the promise of the response
 * @param {Client} client init settings for the api client (url and headers)
 * @param {string} id url param for the endpoint 

 * @param {OptionalParams} [opt] optional params you can add to the request ( appended_url and custom options )
 * @returns {Promise<Response>} Promise of the fetch request
 */
export async function GetUserByID(client : Client,id: string,  opt?: OptionalParams): Promise<Response> {
  const appended_url = opt?.append_url ? opt?.append_url : "";
  const url = `${client.host_url}${client.api_prefix}/user/id/${id}${appended_url}`;
  if (opt?.options) {
    return await fetch(url, opt?.options);
  }
  return await fetch(url, {
    method: "GET",
    headers: client.headers,
    });
}

/**
 * ### POST URL/user/register
 * Fetch RegisterUser endpoint and return the promise of the response
 * @param {Client} client init settings for the api client (url and headers)
 * @param {RegisterUserBody} body see RegisterUserBody interface for validation fields
 * @param {OptionalParams} [opt] optional params you can add to the request ( appended_url and custom options )
 * @returns {Promise<Response>} Promise of the fetch request
 */
export async function RegisterUser(client : Client,body: RegisterUserBody, opt?: OptionalParams ): Promise<Response> {
  const appended_url = opt?.append_url ? opt?.append_url : "";
  const url = `${client.host_url}${client.api_prefix}/user/register${appended_url}`;
  if (opt?.options) {
    return await fetch(url, opt?.options);
  }
  return await fetch(url, {
    method: "POST",
    headers: client.headers,
    body: JSON.stringify(body)});
}

/**
 * ### DELETE URL/user
 * Fetch DeleteUser endpoint and return the promise of the response
 * @param {Client} client init settings for the api client (url and headers)
 * @param {OptionalParams} [opt] optional params you can add to the request ( appended_url and custom options )
 * @returns {Promise<Response>} Promise of the fetch request
 */
export async function DeleteUser(client : Client, opt?: OptionalParams): Promise<Response> {
  const appended_url = opt?.append_url ? opt?.append_url : "";
  const url = `${client.host_url}${client.api_prefix}/user${appended_url}`;
  if (opt?.options) {
    return await fetch(url, opt?.options);
  }
  return await fetch(url, {
    method: "DELETE",
    headers: client.headers,
    });
}

/**
 * ### GET URL/user/username/[username:string]
 * Fetch GetUserByUsername endpoint and return the promise of the response
 * @param {Client} client init settings for the api client (url and headers)
 * @param {string} username url param for the endpoint 

 * @param {OptionalParams} [opt] optional params you can add to the request ( appended_url and custom options )
 * @returns {Promise<Response>} Promise of the fetch request
 */
export async function GetUserByUsername(client : Client,username: string,  opt?: OptionalParams): Promise<Response> {
  const appended_url = opt?.append_url ? opt?.append_url : "";
  const url = `${client.host_url}${client.api_prefix}/user/username/${username}${appended_url}`;
  if (opt?.options) {
    return await fetch(url, opt?.options);
  }
  return await fetch(url, {
    method: "GET",
    headers: client.headers,
    });
}

/**
 * ### POST URL/user/login
 * Fetch LoginUser endpoint and return the promise of the response
 * @param {Client} client init settings for the api client (url and headers)
 * @param {LoginUserBody} body see LoginUserBody interface for validation fields
 * @param {OptionalParams} [opt] optional params you can add to the request ( appended_url and custom options )
 * @returns {Promise<Response>} Promise of the fetch request
 */
export async function LoginUser(client : Client,body: LoginUserBody, opt?: OptionalParams ): Promise<Response> {
  const appended_url = opt?.append_url ? opt?.append_url : "";
  const url = `${client.host_url}${client.api_prefix}/user/login${appended_url}`;
  if (opt?.options) {
    return await fetch(url, opt?.options);
  }
  return await fetch(url, {
    method: "POST",
    headers: client.headers,
    body: JSON.stringify(body)});
}

/**
 * ### GET URL/user/details
 * Fetch GetUserDetailsWithAuth endpoint and return the promise of the response
 * @param {Client} client init settings for the api client (url and headers)
 * @param {OptionalParams} [opt] optional params you can add to the request ( appended_url and custom options )
 * @returns {Promise<Response>} Promise of the fetch request
 */
export async function GetUserDetailsWithAuth(client : Client, opt?: OptionalParams): Promise<Response> {
  const appended_url = opt?.append_url ? opt?.append_url : "";
  const url = `${client.host_url}${client.api_prefix}/user/details${appended_url}`;
  if (opt?.options) {
    return await fetch(url, opt?.options);
  }
  return await fetch(url, {
    method: "GET",
    headers: client.headers,
    });
}
    

/**
 * ### GET URL/transaction
 * Fetch GetTransactionsForUser endpoint and return the promise of the response
 * @param {Client} client init settings for the api client (url and headers)
 * @param {OptionalParams} [opt] optional params you can add to the request ( appended_url and custom options )
 * @returns {Promise<Response>} Promise of the fetch request
 */
export async function GetTransactionsForUser(client : Client, opt?: OptionalParams): Promise<Response> {
  const appended_url = opt?.append_url ? opt?.append_url : "";
  const url = `${client.host_url}${client.api_prefix}/transaction${appended_url}`;
  if (opt?.options) {
    return await fetch(url, opt?.options);
  }
  return await fetch(url, {
    method: "GET",
    headers: client.headers,
    });
}

/**
 * ### POST URL/transaction
 * Fetch CreateTransaction endpoint and return the promise of the response
 * @param {Client} client init settings for the api client (url and headers)
 * @param {CreateTransactionBody} body see CreateTransactionBody interface for validation fields
 * @param {OptionalParams} [opt] optional params you can add to the request ( appended_url and custom options )
 * @returns {Promise<Response>} Promise of the fetch request
 */
export async function CreateTransaction(client : Client,body: CreateTransactionBody, opt?: OptionalParams ): Promise<Response> {
  const appended_url = opt?.append_url ? opt?.append_url : "";
  const url = `${client.host_url}${client.api_prefix}/transaction${appended_url}`;
  if (opt?.options) {
    return await fetch(url, opt?.options);
  }
  return await fetch(url, {
    method: "POST",
    headers: client.headers,
    body: JSON.stringify(body)});
}

/**
 * ### GET URL/transaction/[transaction_id:string]
 * Fetch GetTransactionByID endpoint and return the promise of the response
 * @param {Client} client init settings for the api client (url and headers)
 * @param {string} transaction_id url param for the endpoint 

 * @param {OptionalParams} [opt] optional params you can add to the request ( appended_url and custom options )
 * @returns {Promise<Response>} Promise of the fetch request
 */
export async function GetTransactionByID(client : Client,transaction_id: string,  opt?: OptionalParams): Promise<Response> {
  const appended_url = opt?.append_url ? opt?.append_url : "";
  const url = `${client.host_url}${client.api_prefix}/transaction/${transaction_id}${appended_url}`;
  if (opt?.options) {
    return await fetch(url, opt?.options);
  }
  return await fetch(url, {
    method: "GET",
    headers: client.headers,
    });
}
    

/**
 * ### GET URL/balance/[id:string]
 * Fetch GetBalance endpoint and return the promise of the response
 * @param {Client} client init settings for the api client (url and headers)
 * @param {string} id url param for the endpoint 

 * @param {OptionalParams} [opt] optional params you can add to the request ( appended_url and custom options )
 * @returns {Promise<Response>} Promise of the fetch request
 */
export async function GetBalance(client : Client,id: string,  opt?: OptionalParams): Promise<Response> {
  const appended_url = opt?.append_url ? opt?.append_url : "";
  const url = `${client.host_url}${client.api_prefix}/balance/${id}${appended_url}`;
  if (opt?.options) {
    return await fetch(url, opt?.options);
  }
  return await fetch(url, {
    method: "GET",
    headers: client.headers,
    });
}

/**
 * ### POST URL/balance
 * Fetch CreateBalance endpoint and return the promise of the response
 * @param {Client} client init settings for the api client (url and headers)
 * @param {OptionalParams} [opt] optional params you can add to the request ( appended_url and custom options )
 * @returns {Promise<Response>} Promise of the fetch request
 */
export async function CreateBalance(client : Client, opt?: OptionalParams): Promise<Response> {
  const appended_url = opt?.append_url ? opt?.append_url : "";
  const url = `${client.host_url}${client.api_prefix}/balance${appended_url}`;
  if (opt?.options) {
    return await fetch(url, opt?.options);
  }
  return await fetch(url, {
    method: "POST",
    headers: client.headers,
    });
}

/**
 * ### DELETE URL/balance/[id:string]
 * Fetch DeleteBalance endpoint and return the promise of the response
 * @param {Client} client init settings for the api client (url and headers)
 * @param {string} id url param for the endpoint 

 * @param {OptionalParams} [opt] optional params you can add to the request ( appended_url and custom options )
 * @returns {Promise<Response>} Promise of the fetch request
 */
export async function DeleteBalance(client : Client,id: string,  opt?: OptionalParams): Promise<Response> {
  const appended_url = opt?.append_url ? opt?.append_url : "";
  const url = `${client.host_url}${client.api_prefix}/balance/${id}${appended_url}`;
  if (opt?.options) {
    return await fetch(url, opt?.options);
  }
  return await fetch(url, {
    method: "DELETE",
    headers: client.headers,
    });
}

/**
 * ### PUT URL/balance/[id:string]
 * Fetch UpdateBalance endpoint and return the promise of the response
 * @param {Client} client init settings for the api client (url and headers)
 * @param {string} id url param for the endpoint 

 * @param {OptionalParams} [opt] optional params you can add to the request ( appended_url and custom options )
 * @returns {Promise<Response>} Promise of the fetch request
 */
export async function UpdateBalance(client : Client,id: string,  opt?: OptionalParams): Promise<Response> {
  const appended_url = opt?.append_url ? opt?.append_url : "";
  const url = `${client.host_url}${client.api_prefix}/balance/${id}${appended_url}`;
  if (opt?.options) {
    return await fetch(url, opt?.options);
  }
  return await fetch(url, {
    method: "PUT",
    headers: client.headers,
    });
}
    

/**
 * ### POST URL/auth/token
 * Fetch TokenIsValid endpoint and return the promise of the response
 * @param {Client} client init settings for the api client (url and headers)
 * @param {TokenIsValidBody} body see TokenIsValidBody interface for validation fields
 * @param {OptionalParams} [opt] optional params you can add to the request ( appended_url and custom options )
 * @returns {Promise<Response>} Promise of the fetch request
 */
export async function TokenIsValid(client : Client,body: TokenIsValidBody, opt?: OptionalParams ): Promise<Response> {
  const appended_url = opt?.append_url ? opt?.append_url : "";
  const url = `${client.host_url}${client.api_prefix}/auth/token${appended_url}`;
  if (opt?.options) {
    return await fetch(url, opt?.options);
  }
  return await fetch(url, {
    method: "POST",
    headers: client.headers,
    body: JSON.stringify(body)});
}
    
