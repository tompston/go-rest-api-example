-- Code generated by gomarvin, v0.6.x

CREATE TABLE IF NOT EXISTS users (
  -- init
  user_id       uuid              DEFAULT uuid_generate_v4 () PRIMARY KEY,
  created_at    TIMESTAMP         NOT NULL DEFAULT NOW(),
  updated_at    TIMESTAMP         NOT NULL DEFAULT NOW(),

  -- new columns below
  is_admin     boolean            NOT NULL DEFAULT false,
  username     VARCHAR(300)       NOT NULL UNIQUE,
  email        VARCHAR(300)       NOT NULL UNIQUE,
  password     VARCHAR(700)       NOT NULL
);


-- when the row is updated, update the "updated_at" timestamp
CREATE TRIGGER set_timestamp BEFORE UPDATE ON users
FOR EACH ROW EXECUTE PROCEDURE trigger_set_timestamp();


-- name: User_CountAll :one
SELECT      COUNT(*)
FROM        users;


-- name: User_GetAll :many
SELECT      user_id, created_at, username
FROM        users
ORDER BY    created_at DESC;


-- name: User_GetAllWithPaginationFirstPage :many
SELECT      user_id, created_at, username
FROM        users
ORDER BY    created_at DESC
LIMIT       $1;


-- name: User_GetAllWithPaginationNextPage :many
SELECT      user_id, created_at, username
FROM        users
WHERE
    (
      created_at <= @created_at::TIMESTAMP
      OR 
      ( created_at = @created_at::TIMESTAMP AND user_id < @user_id::uuid )
    )
ORDER BY    created_at DESC
LIMIT       @_limit::int;


-- name: User_GetAllWhereCreatedAt :many
SELECT      user_id, created_at, username
FROM        users
WHERE       created_at = $1
ORDER BY    created_at DESC;


-- name: User_GetAllBetweenDates :many
SELECT      user_id, created_at, username
FROM        users
WHERE       created_at BETWEEN SYMMETRIC $1 AND $2
ORDER BY    created_at DESC;


-- name: User_GetWhereUsernameIncludes :many
SELECT      user_id, created_at, username
FROM        users
WHERE       username ILIKE '%' || ( $1 ) || '%'
ORDER BY    created_at DESC;


-- name: User_GetWhereIdEquals :one
SELECT      user_id, created_at, username
FROM        users
WHERE       user_id = $1
LIMIT 1;

-- name: User_GetWhereUsernameEquals :one
SELECT      user_id, created_at, username
FROM        users
WHERE       username = $1
LIMIT 1;

-- name: User_Create :one
INSERT INTO users ( username, email, password )
VALUES      ( $1, $2, $3 )
RETURNING   *;

-- name: User_LoginWithUsername :one
SELECT      *
FROM        users
WHERE       username = $1
LIMIT       1;

-- name: User_UpdateUsernameWhereIdEquals :one
UPDATE      users
SET         username = $1
WHERE       user_id = $2
RETURNING   *;

-- name: User_UpdateUserToAdminWhereIdEquals :one
UPDATE      users
SET         is_admin = TRUE
WHERE       user_id = $1
RETURNING   *;

-- name: User_UpdateUsernameWhereUsernameEquals :one
UPDATE      users
SET         username = $1
WHERE       username = $2
RETURNING   *;

-- name: User_DeleteWhereIdEquals :one
DELETE FROM users
WHERE       user_id = $1
RETURNING   *;


-- name: User_GetSentTransactionsWhereUserIdEqualsFirstPage :many
SELECT      
    users.user_id, users.username,
    transactions.transaction_id, transactions.amount, transactions.created_at
FROM
    users
    INNER JOIN  transactions
    ON @user_id::uuid = transactions.sender_id
ORDER BY    transactions.created_at DESC
LIMIT       @_limit::int;


-- name: User_GetSentTransactionsWhereUserIdEquals :many
SELECT      
    users.user_id, users.username,
    transactions.transaction_id, transactions.amount, transactions.created_at
FROM
    users
    INNER JOIN  transactions
    ON @user_id::uuid = transactions.sender_id
WHERE 
    ( transactions.created_at <= @created_at::TIMESTAMP OR 
    ( transactions.created_at =  @created_at::TIMESTAMP AND users.user_id < @user_id::uuid ))
ORDER BY    transactions.created_at DESC
LIMIT       @_limit::int;

