-- Code generated by gomarvin, v0.6.x

CREATE TABLE IF NOT EXISTS transactions (
  -- init
  transaction_id     uuid         DEFAULT uuid_generate_v4 () PRIMARY KEY,
  created_at    TIMESTAMP         NOT NULL DEFAULT NOW(),
  updated_at    TIMESTAMP         NOT NULL DEFAULT NOW(),

  -- new fields
  sender_id     uuid              NOT NULL REFERENCES users(user_id) ON DELETE CASCADE,
  receiver_id   uuid              NOT NULL REFERENCES users(user_id) ON DELETE CASCADE,
  amount        integer           NOT NULL
);


-- when the row is updated, update the "updated_at" timestamp
CREATE TRIGGER set_timestamp BEFORE UPDATE ON transactions
FOR EACH ROW EXECUTE PROCEDURE trigger_set_timestamp();


-- name: Transaction_CountAll :one
SELECT      COUNT(*)
FROM        transactions;


-- name: Transaction_GetAll :many
SELECT      transaction_id, created_at, sender_id, receiver_id
FROM        transactions
ORDER BY    created_at DESC;


-- name: Transaction_GetAllWithPaginationFirstPage :many
SELECT      transaction_id, created_at,  sender_id, receiver_id
FROM        transactions
ORDER BY    created_at DESC
LIMIT       $1;


-- name: Transaction_GetAllWithPaginationNextPage :many
SELECT      transaction_id, created_at,  sender_id, receiver_id
FROM        transactions
WHERE       ( created_at <= @created_at::TIMESTAMP  OR 
            ( created_at = @created_at::TIMESTAMP   AND transaction_id < @transaction_id::uuid ) )
ORDER BY    created_at DESC
LIMIT       @_limit::int;


-- name: Transaction_GetAllWhereSenderId :many
SELECT      transaction_id, created_at,  sender_id, receiver_id, amount
FROM        transactions
WHERE       sender_id = $1
ORDER BY    created_at DESC;


-- name: Transaction_GetAllWhereReceiverId :many
SELECT      transaction_id, created_at,  sender_id, receiver_id, amount
FROM        transactions
WHERE       receiver_id = $1
ORDER BY    created_at DESC;


-- name: Transaction_GetAllBetweenDates :many
SELECT      transaction_id, created_at,  sender_id, receiver_id, amount
FROM        transactions
WHERE       created_at BETWEEN SYMMETRIC $1 AND $2
ORDER BY    created_at DESC;


-- name: Transaction_GetWhereIdEquals :one
SELECT      transaction_id, created_at,  sender_id, receiver_id, amount
FROM        transactions
WHERE       transaction_id = $1
LIMIT 1;


-- name: Transaction_Create :one
INSERT INTO transactions (  sender_id, receiver_id, amount )
VALUES      ( $1, $2, $3 )
RETURNING   *;


-- name: Transaction_DeleteWhereIdEquals :one
DELETE FROM transactions
WHERE       transaction_id = $1
RETURNING   *;


-- name: Transaction_TransactionBotSendsBonusToUser :one
INSERT INTO TRANSACTIONS ( sender_id, receiver_id, amount )
VALUES ( '899a61bf-d4e4-48d1-9274-467c50166252', $1, 1000 )
RETURNING *;


-- name: Transaction_FindLastTransactionBotBonusPaymentForUser :one
SELECT      created_at, sender_id, receiver_id, amount
FROM        transactions
WHERE       sender_id = '899a61bf-d4e4-48d1-9274-467c50166252'
ORDER BY    created_at DESC
LIMIT 1;